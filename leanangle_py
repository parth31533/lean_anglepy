
    
    

class berryIMU_class:
    import sys
    import time
    import math
    import IMU
    import datetime
    import os
    # If the IMU is upside down (Skull logo facing up), change this value to 1
    IMU_UPSIDE_DOWN = 0

    
    RAD_TO_DEG = 57.29578
    M_PI = 3.14159265358979323846
    A_GAIN = 0.0573  
    G_GAIN = 0.070  	# [deg/s/LSB]  If you change the dps for gyro, you need to update this value accordingly
    DT = 0.02            #loop period. 20ms
    AA =  0.97      	#fiter constant
    MAG_LPF_FACTOR = 0.4 	# Low pass filter constant magnetometer
    ACC_LPF_FACTOR = 0.4 	# Low pass filter constant for accelerometer
    ACC_MEDIANTABLESIZE = 10    	# Median filter table size for accelerometer. Higher = smoother but a longer delay
    MAG_MEDIANTABLESIZE = 10    	# Median filter table size for magnetometer. Higher = smoother but a longer delay


    
    #Kalman filter variables
    Q_angle = 0.01
    Q_gyro = 0.0003
    R_angle = 0.01
    y_bias = 0.0
    x_bias = 0.0
    XP_00 = 0.0
    XP_01 = 0.0
    XP_10 = 0.0
    XP_11 = 0.0
    YP_00 = 0.0
    YP_01 = 0.0
    YP_10 = 0.0
    YP_11 = 0.0
    KFangleX = 0.0
    KFangleY = 0.0



    def kalmanFilterY ( accAngle, gyroRate, DT):
     y=0.0
    S=0.0
    K_0
    K_1

    global KFangleY
    global Q_angle
    global Q_gyro
    global y_bias
    global YP_00
    global YP_01
    global YP_10
    global YP_11

    berryIMU_class.KFangleY = berryIMU_class.KFangleY + DT * (gyroRate - berryIMU_class.y_bias)

    berryIMU_class.YP_00 = berryIMU_class.YP_00 + ( - DT * (berryIMU_class.YP_10 + berryIMU_class.YP_01) + berryIMU_class.Q_angle * DT )
    berryIMU_class.YP_01 = berryIMU_class.YP_01 + ( - DT * berryIMU_class.YP_11 )
    berryIMU_class.YP_10 = berryIMU_class.YP_10 + ( - DT * berryIMU_class.YP_11 )
    berryIMU_class.YP_11 = berryIMU_class.YP_11 + ( + berryIMU_class.Q_gyro * DT )

    y = accAngle - berryIMU_class.KFangleY
    S = berryIMU_class.YP_00 + berryIMU_class.R_angle
    K_0 = berryIMU_class.YP_00 / S
    K_1 = berryIMU_class.YP_10 / S

    berryIMU_class.KFangleY = berryIMU_class.KFangleY + ( K_0 * y )
    berryIMU_class.y_bias = berryIMU_class.y_bias + ( K_1 * y )

    berryIMU_class.YP_00 = berryIMU_class.YP_00 - ( K_0 * berryIMU_class.YP_00 )
    berryIMU_class.YP_01 = berryIMU_class.YP_01 - ( K_0 * berryIMU_class.YP_01 )
    berryIMU_class.YP_10 = berryIMU_class.YP_10 - ( K_1 * berryIMU_class.YP_00 )
    berryIMU_class.YP_11 = berryIMU_class.YP_11 - ( K_1 * berryIMU_class.YP_01 )

    return berryIMU_class.KFangleY

    def kalmanFilterX ( accAngle, gyroRate, DT):
     x=0.0
    S=0.0

    global KFangleX
    global Q_angle
    global Q_gyro
    global x_bias
    global XP_00
    global XP_01
    global XP_10
    global XP_11

    berryIMU_class.KFangleX = berryIMU_class.KFangleX + DT * (gyroRate - berryIMU_class.x_bias)

    berryIMU_class.XP_00 = berryIMU_class.XP_00 + ( - DT * (berryIMU_class.XP_10 + berryIMU_class.XP_01) + berryIMU_class.Q_angle * DT )
    berryIMU_class.XP_01 = berryIMU_class.XP_01 + ( - DT * berryIMU_class.XP_11 )
    berryIMU_class.XP_10 = berryIMU_class.XP_10 + ( - DT * berryIMU_class.XP_11 )
    berryIMU_class.XP_11 = berryIMU_class.XP_11 + ( + berryIMU_class.Q_gyro * DT )

    x = accAngle - berryIMU_class.KFangleX
    S = berryIMU_class.XP_00 + berryIMU_class.R_angle
    K_0 = berryIMU_class.XP_00 / S
    K_1 = berryIMU_class.XP_10 / S

    berryIMU_class.KFangleX = berryIMU_class.KFangleX + ( K_0 * x )
    berryIMU_class.x_bias = berryIMU_class.x_bias + ( K_1 * x )

    berryIMU_class.XP_00 = berryIMU_class.XP_00 - ( K_0 * berryIMU_class.XP_00 )
    berryIMU_class.XP_01 = berryIMU_class.XP_01 - ( K_0 * berryIMU_class.XP_01 )
    berryIMU_class.XP_10 = berryIMU_class.XP_10 - ( K_1 * berryIMU_class.XP_00 )
    berryIMU_class.XP_11 = berryIMU_class.XP_11 - ( K_1 * berryIMU_class.XP_01 )

    return berryIMU_class.KFangleX


    gyroXangle = 0.0
    gyroYangle = 0.0
    gyroZangle = 0.0
    CFangleX = 0.0
    CFangleY = 0.0
    CFangleXFiltered = 0.0
    CFangleYFiltered = 0.0
    kalmanX = 0.0
    kalmanY = 0.0
    oldXAccRawValue = 0
    oldYAccRawValue = 0
    oldZAccRawValue = 0

    a = datetime.datetime.now()




    IMU.detectIMU()     #Detect if BerryIMUv1 or BerryIMUv2 is connected.
    IMU.initIMU()       #Initialise the accelerometer, gyroscope and compass

    def readvalues(self):
     import IMU
    import math
    import time
    import datetime
    #Read the accelerometer,gyroscope
    ACCx = IMU.readACCx()
    ACCy = IMU.readACCy()
    ACCz = IMU.readACCz()
    GYRx = IMU.readGYRx()
    GYRy = IMU.readGYRy()
    GYRz = IMU.readGYRz()
     



    ##Calculate loop Period(LP). How long between Gyro Reads
    b = datetime.datetime.now() - berryIMU_class.a
    berryIMU_class.a = datetime.datetime.now()
    LP = b.microseconds/(1000000*1.0)
    





    #Convert Gyro raw to degrees per second
    rate_gyr_x =  GYRx * berryIMU_class.G_GAIN
    rate_gyr_y =  GYRy * berryIMU_class.G_GAIN
    rate_gyr_z =  GYRz * berryIMU_class.G_GAIN


    #Calculate the angles from the gyro.
    berryIMU_class.gyroXangle+=rate_gyr_x*LP
    berryIMU_class.gyroYangle+=rate_gyr_y*LP
    berryIMU_class.gyroZangle+=rate_gyr_z*LP

    #Convert Accelerometer values to degrees
    AccXangle =  (math.atan2(ACCy,ACCz)*berryIMU_class.RAD_TO_DEG)
    AccYangle =  (math.atan2(ACCz,ACCx)+berryIMU_class.M_PI)*berryIMU_class.RAD_TO_DEG
        
   

    #Change the rotation value of the accelerometer to -/+ 180 and
    #move the Y axis '0' point to up.  This makes it easier to read.
    AccXangle -= 180.0
    if AccYangle > 90:
            AccYangle -= 270.0
    else:
            AccYangle += 90.0




    #Kalman filter used to combine the accelerometer and gyro values.
    berryIMU_class.kalmanY = berryIMU_class.kalmanFilterY(AccYangle, rate_gyr_y,LP)
    berryIMU_class.kalmanX = berryIMU_class.kalmanFilterX(AccXangle, rate_gyr_x,LP)
    print (" berryIMU_class.kalmanX %7.3f  berryIMU_class.kalmanY%7.3f " % (berryIMU_class.kalmanX,berryIMU_class.kalmanY))







    if 1:			#Change to '0' to stop showing the angles from the accelerometer
            print ("# ACCX Angle %5.2f ACCY Angle %5.2f #  " % (AccXangle, AccYangle)),

    if 1:			#Change to '0' to stop  showing the angles from the gyro
            print ("\t# GRYX Angle %5.2f  GYRY Angle %5.2f  GYRZ Angle %5.2f # " % (berryIMU_class.gyroXangle,berryIMU_class.gyroYangle,berryIMU_class.gyroZangle)),
    
     

    print ("")
        
    # Time in UTC!


    # Velocity Test:
    DeltaTime = time.time() - OldTime
    VelocityY = VelocityY + AccYangle
    # OldTime

    sensor_data = {"Time": time.time(), "AccXangle":AccXangle, "AccYangle":AccYangle, "gyroXangle":berryIMU_class.gyroXangle,"gyroYangle":berryIMU_class.gyroYangle,"gyroZangle":berryIMU_class.gyroZangle,"kalmanX":berryIMU_class.kalmanX,"kalmanY":berryIMU_class.kalmanY}

    #slow program down a bit, makes the output more readable
    time.sleep(0.03)

    return sensor_data
